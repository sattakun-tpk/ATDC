import sqlite3
from datetime import datetime, date

DB = "promotion.db"

def init_db():
    conn = sqlite3.connect(DB)
    cur = conn.cursor()
    cur.execute("""
    CREATE TABLE IF NOT EXISTS promotions(
        promo_id    INTEGER PRIMARY KEY AUTOINCREMENT,
        title       TEXT NOT NULL,
        description TEXT NOT NULL,
        start_date  TEXT NOT NULL,   -- ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô ISO: YYYY-MM-DD
        end_date    TEXT NOT NULL
    )
    """)

    sample = [
        ("‡∏õ‡∏µ‡πÉ‡∏´‡∏°‡πà‡∏•‡∏î‡πÅ‡∏£‡∏á 50%", "‡∏•‡∏î‡∏ó‡∏±‡∏ô‡∏ó‡∏µ 50% ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏£‡πà‡∏ß‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", "2025-12-25", "2026-01-05"),
        ("‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç 300", "‡∏£‡∏±‡∏ö‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á 300 ‡∏ö‡∏≤‡∏ó ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ã‡∏∑‡πâ‡∏≠‡∏Ñ‡∏£‡∏ö 1,500", "2025-12-20", "2026-01-10"),
        ("‡∏ä‡πâ‡∏≠‡∏õ‡∏Ç‡πâ‡∏≤‡∏°‡∏õ‡∏µ", "‡∏™‡πà‡∏á‡∏ü‡∏£‡∏µ‡∏ó‡∏∏‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏Ñ‡∏≤‡∏ó‡πå‡∏î‡∏≤‡∏ß‡∏ô‡πå", "2025-12-31", "2026-01-01"),
    ]
    cur.executemany("""
        INSERT OR IGNORE INTO promotions(promo_id, title, description, start_date, end_date)
        VALUES(NULL, ?, ?, ?, ?)
    """, sample)
    conn.commit()
    return conn, cur


def parse_date(s: str) -> date | None:
    """‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: YYYY-MM-DD, DD/MM/YYYY, DD-MM-YYYY"""
    for fmt in ("%Y-%m-%d", "%d/%m/%Y", "%d-%m-%Y"):
        try:
            return datetime.strptime(s.strip(), fmt).date()
        except ValueError:
            pass
    return None


def is_active_on(check: date, start_s: str, end_s: str) -> bool:
    start = datetime.strptime(start_s, "%Y-%m-%d").date()
    end = datetime.strptime(end_s, "%Y-%m-%d").date()
    return start <= check <= end


def show_promo_row(row):
    pid, title, desc, start_s, end_s = row
    
    msg = (
        f"üéâ ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô: {title}\n"
        f"‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {desc}\n"
        f"‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤: {start_s} ‡∏ñ‡∏∂‡∏á {end_s}"
    )
    print(msg)



def chatbot():
    print("üéä ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡πà‡∏á‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î‡∏ä‡πà‡∏ß‡∏á‡∏õ‡∏µ‡πÉ‡∏´‡∏°‡πà (‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ABC)")
    print("‡∏û‡∏¥‡∏°‡∏û‡πå 1 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ '‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô'")
    print("‡∏û‡∏¥‡∏°‡∏û‡πå 2 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà' (‡πÇ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ú‡∏•‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡πâ‡∏ô)")
    choice = input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (1/2): ").strip()

    conn, cur = init_db()

    if choice == "1":
        title = input("‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô: ").strip()
        cur.execute("""
            SELECT promo_id, title, description, start_date, end_date
            FROM promotions WHERE lower(title)=lower(?)
        """, (title,))
        row = cur.fetchone()
        if not row:
            print("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
            conn.close()
            return

        
        today = date.today()
        start = datetime.strptime(row[3], "%Y-%m-%d").date()
        end = datetime.strptime(row[4], "%Y-%m-%d").date()

        if today < start:
            print(f"‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏¥‡πà‡∏° (‡πÄ‡∏£‡∏¥‡πà‡∏° {row[3]})")
        elif today > end:
            print(f"‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô‡∏´‡∏°‡∏î‡πÄ‡∏Ç‡∏ï‡πÅ‡∏•‡πâ‡∏ß (‡∏´‡∏°‡∏î‡πÄ‡∏Ç‡∏ï {row[4]})")
        else:
            show_promo_row(row)
            print("‚úÖ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ")

    elif choice == "2":
        s = input("‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (‡πÄ‡∏ä‡πà‡∏ô 2025-12-31 ‡∏´‡∏£‡∏∑‡∏≠ 31/12/2025): ")
        d = parse_date(s)
        if not d:
            print("‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
            conn.close()
            return

        cur.execute("SELECT promo_id, title, description, start_date, end_date FROM promotions")
        rows = cur.fetchall()
        active = [r for r in rows if is_active_on(d, r[3], r[4])]
        if not active:
            
            print("‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏î‡∏±‡∏á‡∏Å‡∏•‡πà‡∏≤‡∏ß")
        else:
            print(f"‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {d.isoformat()}:")
            for r in active:
                show_promo_row(r)
                print("-" * 40)
    else:
        print("‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô 1 ‡∏´‡∏£‡∏∑‡∏≠ 2)")

    conn.close()


if __name__ == "__main__":
    init_db()
    chatbot()
